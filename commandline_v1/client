#include<iostream>
using namespace std;
#include <unistd.h>
#include <arpa/inet.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<signal.h>
#include<cstring>
#include<cstdlib>
#define BUFMAX 1024
#define SERVER_PORT 6666

struct packet{
    int len;
    char name[16];
    char buf[BUFMAX];
};

void test(pid_t pid,int num){
    if(num<=0){
        if(num==0){
            cout<<"连接中断 read进程关闭"<<endl;
            kill(pid,SIGUSR1);
            exit(0);
        }
        else{
            cout<<"num<0错误"<<endl;
            exit(0);
        }
    }
}

void func(int flag){
    if(flag==SIGUSR1){
        cout<<"连接中断 write进程中断"<<endl;
        exit(0);
    }
}


ssize_t readn(int fd, void *buf, size_t count){
    ssize_t nleft=count;
    ssize_t nread;
    char *bufp=(char *)buf;
    
    while(nleft>0){
        if( (nread=read(fd,bufp,nleft))<=0 ){
            cout<<"*****nead"<<nread<<endl;
            return 0;
        }
        nleft-=nread;
        bufp+=nread;
    }
    return count;
}

ssize_t writen(int fd, void *buf, size_t count){
    ssize_t nleft=count;
    ssize_t nwrite;
    char *bufp=(char *)buf;
    cout<<"**************"<<endl;
    while(nleft>0){
        if( (nwrite=write(fd,bufp,nleft))<=0 ){
            cout<<"连接中断"<<endl;
            return -1;
        }
        nleft-=nwrite;
        bufp+=nwrite;
    }
//    memset(buf, 0, sizeof(buf));//加在这里会导致自己发出去的消息又发回给自己，且服务器端没显示发送方姓名
    return count;
}



int main(){
    struct packet pack;
    memset(&pack ,0,sizeof(pack));
    int num,nlen;
    pid_t pid;
    int connectfd;
    struct sockaddr_in servaddr;
    memset(&servaddr,0,sizeof(servaddr));

    if( (connectfd=socket(AF_INET,SOCK_STREAM,0))==-1 )
        cout<<"socket错误"<<endl;
       
    servaddr.sin_family=AF_INET;
    servaddr.sin_addr.s_addr=inet_addr("127.0.0.1");
    servaddr.sin_port=htons(SERVER_PORT);
      
    if( connect(connectfd,(struct sockaddr*)&servaddr,sizeof(servaddr))==-1 )
        cout<<"连接失败"<<endl;
    
    cout<<endl<<endl<<"请输入用户名：";
    cin>>pack.name;
    
    pid=fork();
    if(pid>0){
        while(1){//读取服务器发来的消息
            num=(int)readn(connectfd,&pack,4);//读len字段存到pack的len字段
            test(pid,num);
            nlen=ntohl(pack.len);
            num=(int)readn(connectfd,pack.name,nlen+16);//读取用户名和消息，存到pack.name开始的地址空间中(包括pack.name和pack.buf)
            test(pid,num);
            
            
            if ((int)strlen(pack.buf)!=0) {//判断包不空时才打印，防止打印出只有名字没有信息的行
                std::cout<<pack.name<<": "<<pack.buf<<std::endl;
            }
            
            memset(&pack,0,strlen(pack.buf)+20);//清空buf
        }
    }
    else if(pid==0){//发送消息给服务器
        writen(connectfd,pack.name,strlen(pack.name));//发用户名
        signal(SIGUSR1,func);
        while(1){
            //从键盘读取输入存到pack.buf
            int count = 0;
            char ch = getchar();
            while (ch != '\n') {
                pack.buf[count++] = ch;
                ch = getchar();
            }
            pack.buf[count++] = '\0';
            
            nlen=(int)strlen(pack.buf);
            pack.len=htonl(nlen);//pack的len字段存的是buf的大小
            writen(connectfd,&pack,nlen+20);//20指的是4个字节的len和16个字节的name
//            memset(&pack,0,strlen(pack.buf)+20);//导致服务器接到空包，可能是因为内存共享
            memset(pack.buf, 0, sizeof(pack.buf));//
        }
    }
    else
        cout<<"pid错误"<<endl;
    
    
    return 0;
}
